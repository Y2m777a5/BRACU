//Adjacency Matrix.........................

public class AdjacencyMatrix {
    public int[][] matrix;
    public boolean check;

    public AdjacencyMatrix(int size, boolean check){
        this.check = check;
        this.matrix = new int [size][size];
    }

    public void addEdge(int source, int destination, int weight){
        this.matrix[source][destination]=weight;
        if(!check){
            this.matrix[destination][source]= weight;
        }
    }

    public void delEdge(int source, int destination){
        this.matrix[source][destination]=0;
        if(!check){
            this.matrix[destination][source]=0;
        }
    }

    public boolean hasEdge(int source, int destination){
        return this.matrix[source][destination] != 0;
    }

    public boolean checkDirect(int[][] matrix){
        for(int i=1; i<matrix.length; i++){
            for(int j=1; j<matrix[i].length; j++){
                if(matrix[i][j]==matrix[j][i]){
                    return true;
                }
            }
        }
        return false;
    }

    public int[] findMaxVer(int[][] matrix){
        int max[] = new int[2];
        for(int i=1; i<matrix.length; i++){
            int sum = 0;
            for(int j=1; j<matrix[i].length-1; j++){
                if(matrix[i][j]!=0){
                    sum++;
                }
            }
            if(i==0 || max[1]<sum){
                max[0]=i;
                max[1]=sum;
            }
        }
        return max;
    }

    public int[] findMaxWeight(int[][] matrix){
        int max[] = new int[2];
        for(int i=1; i<matrix.length; i++){
            int sum = 0;
            for(int j=1; j<matrix[i].length-1; j++){
                if(matrix[i][j]!=0){
                    sum+=matrix[i][j];
                }
            }
            if(i==0 || max[1]<sum){
                max[0]=i;
                max[1]=sum;
            }
        }
        return max;
    }

    public void convert(int[][] matrix){
        for(int i=1; i<matrix.length; i++){
            for(int j=1; j<matrix[i].length; j++){
                if(matrix[i][j]!=0){
                    matrix[j][i] = matrix[i][j];
                }
            }
        }
        System.out.println("converted to undirected: ");
        printMatrix(matrix);
    }

    public void printMatrix(int[][] matrix){
        for(int i=1; i<matrix.length; i++){
            for(int j=1; j<matrix[i].length-1; j++){
                System.out.print(matrix[i][j]+", ");
            }
            System.out.println(matrix[i][matrix[i].length-1]);
        }
    }
}




//Driver_Code.........................

public class AdjacencyMatrixTester {
    public static void main(String[] agrs){
        int[][] adj_matrix = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 1, 1, 1, 1, 0, 1, 1, 0},
            {0, 1, 0, 1, 0, 0, 0, 1, 0, 1},
            {0, 1, 1, 0, 1, 1, 1, 0, 0, 0},
            {0, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {0, 1, 0, 1, 0, 0, 1, 1, 1, 0},
            {0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
            {0, 1, 1, 0, 0, 1, 0, 0, 1, 0},
            {0, 1, 0, 0, 0, 1, 0, 1, 0, 0},
            {0, 0, 1, 0, 1, 0, 0, 0, 0, 0}
        };

        //print given Adjacency Matrix;
        System.out.println("Given matrix");
        for(int i=1; i<adj_matrix.length; i++){
            for(int j=1; j<adj_matrix[i].length-1; j++){
                System.out.print(adj_matrix[i][j]+", ");
            }
            System.out.println(adj_matrix[i][adj_matrix[i].length-1]);
        }

        System.out.println("\n------------------------------\n");
        
        //Craeting graphUndirect (http://graphonline.top/?graph=vOKKmovfGoGqJmwNZZcst);
        AdjacencyMatrix graphUndirect = new AdjacencyMatrix(10, false);

        graphUndirect.addEdge(1, 2, 1);
        graphUndirect.addEdge(1, 3, 1);
        graphUndirect.addEdge(1, 4, 1);
        graphUndirect.addEdge(1, 5, 1);
        graphUndirect.addEdge(1, 7, 1);
        graphUndirect.addEdge(1, 8, 1);
        graphUndirect.addEdge(2, 3, 1);
        graphUndirect.addEdge(2, 7, 1);
        graphUndirect.addEdge(2, 9, 1);
        graphUndirect.addEdge(3, 4, 1);
        graphUndirect.addEdge(3, 5, 1);
        graphUndirect.addEdge(3, 6, 1);
        graphUndirect.addEdge(4, 6, 1);
        graphUndirect.addEdge(4, 9, 1);
        graphUndirect.addEdge(5, 6, 1);
        graphUndirect.addEdge(5, 7, 1);
        graphUndirect.addEdge(5, 8, 1);
        graphUndirect.addEdge(7, 8, 1);

        System.out.println("Undirected: ");
        graphUndirect.printMatrix(graphUndirect.matrix);

        String t1="task#1";
        printTask(t1);
        int []maxVer = graphUndirect.findMaxVer(graphUndirect.matrix);
        System.out.println("Expected output-\nVertex: 1\nDegree: 6\n");
        System.out.println("Resulted output-\nVertex: "+maxVer[0]+"\nDegree: "+maxVer[1]);
        if(maxVer[0]==1 && maxVer[1]==6) printMatched(t1);
        else printMismatched(t1);



        String t2="task#2";
        printTask(t2);
        int []maxWght = graphUndirect.findMaxWeight(graphUndirect.matrix);
        System.out.println("Expected output-\nVertex: 1\nDegree: 6\n");
        System.out.println("Resulted output-\nVertex: "+maxWght[0]+"\nDegree: "+maxWght[1]);
        if(maxWght[0]==1 && maxWght[1]==6) printMatched(t1);
        else printMismatched(t1);



        //Creating GraphDirect (http://graphonline.top/?graph=vOKKmovfGoGqJmwNZZcst);
        AdjacencyMatrix graphDirect = new AdjacencyMatrix(10, true);

        graphDirect.addEdge(1, 2, 2);
        graphDirect.addEdge(1, 3, 7);
        graphDirect.addEdge(1, 4, 1);
        graphDirect.addEdge(1, 5, 4);
        graphDirect.addEdge(1, 7, 3);
        graphDirect.addEdge(1, 8, 2);
        graphDirect.addEdge(2, 3, 1);
        graphDirect.addEdge(2, 7, 5);
        graphDirect.addEdge(2, 9, 1);
        graphDirect.addEdge(3, 4, 9);
        graphDirect.addEdge(3, 5, 8);
        graphDirect.addEdge(3, 6, 8);
        graphDirect.addEdge(4, 6, 9);
        graphDirect.addEdge(4, 9, 1);
        graphDirect.addEdge(5, 6, 3);
        graphDirect.addEdge(5, 7, 4);
        graphDirect.addEdge(5, 8, 6);
        graphDirect.addEdge(7, 8, 7);

        System.out.println("Directed: ");
        graphDirect.printMatrix(graphDirect.matrix);



        String t3="task#3";
        printTask(t3);

        String test3_1 ="test#1";
        printTest(test3_1);
        maxVer = graphUndirect.findMaxVer(graphDirect.matrix);
        System.out.println("Expected output-\nVertex: 1\nDegree: 6\n");
        System.out.println("Resulted output-\nVertex: "+maxVer[0]+"\nDegree: "+maxVer[1]);
        if(maxVer[0]==1 && maxVer[1]==6) printMatched(t1);
        else printMismatched(t3);

        String test3_2 ="test#2";
        printTest(test3_2);
        maxWght = graphUndirect.findMaxWeight(graphDirect.matrix);
        System.out.println("Expected output-\nVertex: 3\nDegree: 25\n");
        System.out.println("Resulted output-\nVertex: "+maxWght[0]+"\nDegree: "+maxWght[1]);
        if(maxWght[0]==3 && maxWght[1]==25) printMatched(t1);
        else printMismatched(t1);



        String t4="task#4";
        printTask(t4);
        graphDirect.convert(graphDirect.matrix);

        System.out.println("\n\n                       "+"\u001B[37m"+"---[ THE END ]---"+"\u001B[0m"+"                     \n");
    }

    //To change the color of the output; [Inspired by AIB sir]
    static final String green ="\u001B[32m", red ="\u001B[31m",white ="\u001B[37m", magenta ="\033[0;95m";
    static final String bold ="\u001B[1m", underline ="\u001B[4m", regular ="\033[0;0m";

    static String taskSyntx =magenta;
    static String testSyntx =white;
    static String matchedSyntx =green+bold;
    static String mismatchedSyntx =red+bold;
    static String closeSyntx =regular;

    public static void printTask(String task){
        System.out.println(taskSyntx+"\n(-------------------------> "+underline+task+regular+taskSyntx+" <-------------------------)\n"+closeSyntx);
    }

    public static void printTest(String task){
        System.out.println(testSyntx+"   ------------------------ "+underline+task+regular+testSyntx+" ------------------------  "+closeSyntx);
    }

    public static void printMatched(String task){
        System.out.println(matchedSyntx+"\n           [   !!! "+underline+task+" result matched"+regular+matchedSyntx+" !!!   ]       \n"+closeSyntx);
    }

    public static void printMismatched(String task){
        System.out.println(mismatchedSyntx+"\n        [   !!! "+underline+task+" result didn't matched"+regular+mismatchedSyntx+" !!!   ]        \n"+closeSyntx);
    }
}




//Edge_Class.........................

public class Edge{
    public int fromV;
    public int toV;
    public int weight;
    public Edge next;
    public Edge(int fromV, int toV, int weight){
        this.fromV = fromV;
        this.toV = toV;
        this.weight = weight;
        this.next = null;
    }
}




//Adjacency List.........................

public class AdjacencyList {
    public Edge[] adjacencyList;
    public boolean check;

    public AdjacencyList(int vertices, boolean check){
        this.check=check;
        adjacencyList = new Edge[vertices];
    }

    //Inspired By AIB sir;
    //Not a part of the assignmnet (Adjacency matrix -> Adjacency List);
    public AdjacencyList(int[][] matrix){
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[i].length; j++){
                if(matrix[i][j]!=0){
                    addEdge(i, j, matrix[i][j]);
                }
            }
        }
    }

    public void addEdge(int src, int des, int wght){
        if(!check){
            if(hasEdge(src, des)){
            Edge n = adjacencyList[src];
            while(n!=null){
                if(n.fromV==des){
                    n.weight = wght;
                    return; //Work done here so break the method;
                }
                n = n.next;
                }
            }
            else{
                Edge newEdge = new Edge(src, des, wght);
                if(adjacencyList[src]==null){
                    adjacencyList[src]=newEdge;
                }
                else{
                    //Append Linked List
                    appendLL(adjacencyList[src], newEdge);
                }
            }

            //Vice-versa
            if(hasEdge(des, src)){
            Edge n = adjacencyList[src];
            while(n!=null){
                if(n.fromV==src){
                    n.weight = wght;
                    return; //Work done here so break the method;
                }
                n = n.next;
                }
            }
            else{
                Edge newEdge = new Edge(des, src, wght);
                if(adjacencyList[des]==null){
                    adjacencyList[des]=newEdge;
                }
                else{
                    //Append Linked List
                    appendLL(adjacencyList[des], newEdge);
                }
            }
        }
        else{
            if(hasEdge(src, des)){
            Edge n = adjacencyList[src];
            while(n!=null){
                if(n.fromV==des){
                    n.weight = wght;
                    return; //Work done here so break the method;
                }
                n = n.next;
                }
            }
            else{
                Edge newEdge = new Edge(src, des, wght);
                if(adjacencyList[src]==null){
                    adjacencyList[src]=newEdge;
                }
                else{
                    //Append Linked List
                    appendLL(adjacencyList[src], newEdge);
                }
            }
        }
    }

    public void appendLL(Edge head, Edge nNode){
        Edge h = adjacencyList[head.fromV];
        if(nNode.toV<adjacencyList[head.fromV].toV){
            nNode.next = adjacencyList[head.fromV];
            adjacencyList[head.fromV] = nNode;
        }
        else{
            int idx=nNode.toV;
            while(h.next!=null && idx>h.next.toV){
                h = h.next;
            }
            if(h.next==null){
                h.next = nNode;
            }
            else{
                nNode.next = h.next;
                h.next = nNode;
            }
        }
    }
    
    public boolean hasEdge(int src, int des){
        Edge n = adjacencyList[src];
        while(n!=null){
            if(n.toV==des){
                return true;
            }
            n = n.next;
        }
        return false;
    }

    public int getIndex(Edge head, int des){
        Edge h = head;
        int idx=0;
        while(des<=h.toV && h.next!=null){
            idx++;
            h=h.next;
        }
        System.out.println("GetIndex "+h.toV);
        return idx;
    }
    
    public int getLength(Edge h){
        Edge head = h;
        int count=0;
        while(head!=null){
            count++;
            head = head.next;
        }
        return count;
    }

    public void findMaxVer(Edge[] adjacencyList){
        int max = 0;
        int ver = 0;
        for(int i=0; i<adjacencyList.length; i++){
            int tempSum=0;
            Edge head = adjacencyList[i];
            while(head!=null){
                tempSum++;
                head = head.next;
            }
            if(i==0 || max<tempSum){
                ver = i;
                max=tempSum;
            }
        }
        System.out.println("Vertex: "+ver+"\nDegree: "+max);
    }

    public void findMaxWeight(Edge[] adjacencyList){
        int max = 0;
        int ver = 0;
        for(int i=0; i<adjacencyList.length; i++){
            int tempSum=0;
            Edge head = adjacencyList[i];
            while(head!=null){
                tempSum+=head.weight;
                head = head.next;
            }
            if(i==0 || max<tempSum){
                ver = i;
                max=tempSum;
            }
        }
        System.out.println("Vertex: "+ver+"\nSum of weight: "+max);
    }

    public void convert(Edge[] adjacencyList){
        for(int i=0; i<adjacencyList.length; i++){
            Edge head = adjacencyList[i];
            while(head!=null){
                addEdge(head.toV,head.fromV,head.weight);
                head = head.next;
            }
        }
        printAdjacencyList(adjacencyList);
    }

    public void printAdjacencyList(Edge[] adjacencyList){
        for(int i=0; i<adjacencyList.length; i++){
            System.out.print(i+": ");
            printLL(adjacencyList[i]);
            System.out.println();
        }
    }

    private void printLL(Edge head){
        Edge h = head;
        while(h!=null){
            System.out.print("<"+h.fromV+"-"+h.toV+": "+h.weight+"> ");
            h=h.next;
        }
    }
}





//Driver_Code.........................


public class AdjacencyListTester {

    public static void main(String[] agrs){
        System.out.println("\n------------------------------\n");
        
        //Craeting graphUndirect (http://graphonline.top/?graph=vOKKmovfGoGqJmwNZZcst);
        AdjacencyList graphUndirect = new AdjacencyList(10, false);

        graphUndirect.addEdge(1, 2, 1);
        graphUndirect.addEdge(1, 3, 1);
        graphUndirect.addEdge(1, 4, 1);
        graphUndirect.addEdge(1, 5, 1);
        graphUndirect.addEdge(1, 7, 1);
        graphUndirect.addEdge(1, 8, 1);
        graphUndirect.addEdge(2, 3, 1);
        graphUndirect.addEdge(2, 7, 1);
        graphUndirect.addEdge(2, 9, 1);
        graphUndirect.addEdge(3, 4, 1);
        graphUndirect.addEdge(3, 5, 1);
        graphUndirect.addEdge(3, 6, 1);
        graphUndirect.addEdge(4, 6, 1);
        graphUndirect.addEdge(4, 9, 1);
        graphUndirect.addEdge(5, 6, 1);
        graphUndirect.addEdge(5, 7, 1);
        graphUndirect.addEdge(5, 8, 1);
        graphUndirect.addEdge(7, 8, 1);

        System.out.println("Undirected: ");
        graphUndirect.printAdjacencyList(graphUndirect.adjacencyList);

        System.out.println("\n---------------Task#1---------------\n");
        graphUndirect.findMaxVer(graphUndirect.adjacencyList);

        System.out.println("\n---------------Task#2---------------\n");
        graphUndirect.findMaxWeight(graphUndirect.adjacencyList);

        //Creating GraphDirect (http://graphonline.top/?graph=vOKKmovfGoGqJmwNZZcst);
        AdjacencyList graphDirect = new AdjacencyList(10, true);

        graphDirect.addEdge(1, 2, 2);
        graphDirect.addEdge(1, 3, 7);
        graphDirect.addEdge(1, 4, 1);
        graphDirect.addEdge(1, 5, 4);
        graphDirect.addEdge(1, 7, 3);
        graphDirect.addEdge(1, 8, 2);
        graphDirect.addEdge(2, 3, 1);
        graphDirect.addEdge(2, 7, 5);
        graphDirect.addEdge(2, 9, 1);
        graphDirect.addEdge(3, 4, 9);
        graphDirect.addEdge(3, 5, 8);
        graphDirect.addEdge(3, 6, 8);
        graphDirect.addEdge(4, 6, 9);
        graphDirect.addEdge(4, 9, 1);
        graphDirect.addEdge(5, 6, 3);
        graphDirect.addEdge(5, 7, 4);
        graphDirect.addEdge(5, 8, 6);
        graphDirect.addEdge(7, 8, 7);

        System.out.println("Directed: ");
        graphDirect.printAdjacencyList(graphDirect.adjacencyList);

        System.out.println("\n---------------Task#3(1)---------------\n");
        graphDirect.findMaxVer(graphDirect.adjacencyList);

        System.out.println("\n---------------Task#3(2)---------------\n");
        graphDirect.findMaxWeight(graphDirect.adjacencyList);

        System.out.println("\n---------------Task#4---------------\n");
        System.out.println("Undirected: ");
        graphDirect.convert(graphDirect.adjacencyList);
    }
}